package cmd

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/AlecAivazis/survey/v2"
	"github.com/spf13/cobra"
	"github.com/urcop/project-initializer/internal/generator"
)

var (
	moduleName string
	framework  string
	database   string
	enableGRPC bool
)

var initCmd = &cobra.Command{
	Use:   "init [project-name]",
	Short: "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å",
	Long:  `–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏`,
	Args:  cobra.MaximumNArgs(1),
	RunE:  runInit,
}

func init() {
	initCmd.Flags().StringVar(&moduleName, "module", "", "Go module name (–Ω–∞–ø—Ä–∏–º–µ—Ä: github.com/yourorg/project)")
	initCmd.Flags().StringVar(&framework, "framework", "", "–í–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ (gin, fiber, echo)")
	initCmd.Flags().StringVar(&database, "database", "", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (postgresql, mysql, mongodb, in-memory, none)")
	initCmd.Flags().BoolVar(&enableGRPC, "grpc", false, "–í–∫–ª—é—á–∏—Ç—å gRPC —Å–µ—Ä–≤–µ—Ä")
}

func runInit(cmd *cobra.Command, args []string) error {
	config := &generator.ProjectConfig{}

	// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
	if len(args) > 0 {
		config.Name = args[0]
	} else {
		prompt := &survey.Input{
			Message: "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞:",
			Default: "my-service",
		}
		if err := survey.AskOne(prompt, &config.Name); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞: %w", err)
		}
	}

	// Module name
	if moduleName != "" {
		config.ModuleName = moduleName
	} else {
		prompt := &survey.Input{
			Message: "–í–≤–µ–¥–∏—Ç–µ module name –¥–ª—è go mod init:",
			Default: fmt.Sprintf("github.com/yourorg/%s", config.Name),
		}
		if err := survey.AskOne(prompt, &config.ModuleName); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ module name: %w", err)
		}
	}

	// –í—ã–±–æ—Ä —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
	if framework != "" {
		config.Framework = framework
	} else {
		frameworkPrompt := &survey.Select{
			Message: "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫:",
			Options: []string{"Gin", "Fiber", "Echo"},
			Default: "Gin",
		}
		if err := survey.AskOne(frameworkPrompt, &config.Framework); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞: %w", err)
		}
	}

	// –í—ã–±–æ—Ä –ë–î
	if database != "" {
		config.Database = database
	} else {
		dbPrompt := &survey.Select{
			Message: "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:",
			Options: []string{"PostgreSQL", "MySQL", "MongoDB", "In-Memory", "–ë–µ–∑ –ë–î"},
			Default: "PostgreSQL",
		}
		if err := survey.AskOne(dbPrompt, &config.Database); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ë–î: %w", err)
		}
	}

	// gRPC
	if cmd.Flags().Changed("grpc") {
		config.EnableGRPC = enableGRPC
	} else {
		grpcPrompt := &survey.Confirm{
			Message: "–í–∫–ª—é—á–∏—Ç—å gRPC —Å–µ—Ä–≤–µ—Ä?",
			Default: false,
		}
		if err := survey.AskOne(grpcPrompt, &config.EnableGRPC); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ gRPC: %w", err)
		}
	}

	// –ü—É—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
	currentDir, err := os.Getwd()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %w", err)
	}
	config.Path = filepath.Join(currentDir, config.Name)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
	fmt.Printf("\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ '%s' –≤ %s\n", config.Name, config.Path)
	fmt.Printf("üì¶ Framework: %s\n", config.Framework)
	fmt.Printf("üóÑÔ∏è  Database: %s\n", config.Database)
	fmt.Printf("üåê gRPC: %t\n", config.EnableGRPC)

	generator := generator.New(config.Path)
	if err := generator.Generate(config); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: %w", err)
	}

	fmt.Printf("\n‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n")
	fmt.Printf("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: %s\n", config.Path)
	fmt.Printf("\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:\n")
	fmt.Printf("  cd %s\n", config.Name)
	fmt.Printf("  go mod tidy\n")
	fmt.Printf("  make run\n")

	return nil
}
